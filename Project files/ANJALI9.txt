# enchanted_wings_model.py

import os
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img, img_to_array
from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout

# ----------------------
# CONFIGURATION
# ----------------------

IMAGE_SIZE = (150, 150)
BATCH_SIZE = 32
EPOCHS = 10
DATASET_DIR = "butterflies_dataset"  # change to your dataset folder
MODEL_NAME = "enchanted_wings_model.h5"

# ----------------------
# DATA LOADING & SPLITTING
# ----------------------

train_datagen = ImageDataGenerator(
    rescale=1./255,
    validation_split=0.2
)

train_generator = train_datagen.flow_from_directory(
    DATASET_DIR,
    target_size=IMAGE_SIZE,
    batch_size=BATCH_SIZE,
    class_mode='categorical',
    subset='training',
    shuffle=True
)

val_generator = train_datagen.flow_from_directory(
    DATASET_DIR,
    target_size=IMAGE_SIZE,
    batch_size=BATCH_SIZE,
    class_mode='categorical',
    subset='validation'
)

# Save label mapping
class_indices = train_generator.class_indices
labels = {v: k for k, v in class_indices.items()}

# ----------------------
# MODEL BUILDING
# ----------------------

model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)),
    MaxPooling2D(2, 2),

    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),

    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),

    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(train_generator.num_classes, activation='softmax')
])

model.compile(
    optimizer='adam',
    loss='categorical_crossentropy',
    metrics=['accuracy']
)

model.summary()

# ----------------------
# TRAINING
# ----------------------

history = model.fit(
    train_generator,
    epochs=EPOCHS,
    validation_data=val_generator
)

# ----------------------
# SAVE MODEL
# ----------------------

model.save(MODEL_NAME)
print(f"Model saved as {MODEL_NAME}")

# ----------------------
# PLOT TRAINING
# ----------------------

plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Val Accuracy')
plt.title("Butterfly Species Classification Accuracy")
plt.xlabel("Epochs")
plt.ylabel("Accuracy")
plt.legend()
plt.show()

# ----------------------
# PREDICTION FUNCTION
# ----------------------

def predict_image(image_path):
    model = load_model(MODEL_NAME)

    img = load_img(image_path, target_size=IMAGE_SIZE)
    img_array = img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)

    prediction = model.predict(img_array)
    predicted_class = np.argmax(prediction)
    confidence = np.max(prediction)

    label = labels[predicted_class]
    print(f"\nðŸ¦‹ Prediction: {label} ({confidence * 100:.2f}% confidence)")
    return label

# ----------------------
# TEST PREDICTION EXAMPLE
# ----------------------

# Uncomment below to test an image
# test_image_path = "test_images/monarch_sample.jpg"
# predict_image(test_image_path)
